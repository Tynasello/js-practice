/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const projectsBtn = document.getElementById(\"projects-title\");\nconst projectsList = document.getElementById(\"current-projects-list\");\n\nprojectsBtn.addEventListener(\"click\", projectsDropdown);\n\nfunction projectsDropdown() {\n  if (projectsList.style.transform == \"scale(0)\") {\n    projectsList.style.transform = \"scale(1)\";\n    for (let i = 1; i < projectsList.childNodes.length; i++) {\n      projectsList.childNodes[i].style.display = \"flex\";\n    }\n  } else {\n    projectsList.style.transform = \"scale(0)\";\n    for (let i = 1; i < projectsList.childNodes.length; i++) {\n      projectsList.childNodes[i].style.display = \"none\";\n    }\n  }\n}\n\n/* ----------------\n\n---------------- */\n\n//PROJECT DESC DROPDOWN ----------------------\n\nconst task = document.querySelector(\".task\");\ntask.addEventListener(\"click\", taskClicked);\n\nfunction taskClicked() {\n  if (this.querySelector(\".task-info-dropdown\").style.display == \"flex\") {\n    this.querySelector(\".task-info-dropdown\").style.display = \"none\";\n  } else {\n    this.querySelector(\".task-info-dropdown\").style.display = \"flex\";\n  }\n}\n\n// EDIT TASK --------------------------------\n\n// const editBtn = document.querySelector(\".task-edit-btn\");\n// editBtn.addEventListener(\"click\", editTask);\n\n// function editTask() {\n//   overlay.classList.add(\"active\");\n//   modalContainer.classList.add(\"active\");\n//   modalTitle.textContent = \"Edit Task\";\n//   taskConfirmBtn.textContent = \"Confirm Edit\"\n// }\n\n// ----------------------------------------------------------------\nconst overlay = document.getElementById(\"overlay\");\n\nlet subfolders = JSON.parse(localStorage.getItem(\"subfolders\")) || [];\nlet selectedSubfolderId = localStorage.getItem(\"selectedSubfolderId\");\n\n/*----- \nHELPER FUNCTIONS\n-----*/\nfunction removeFromDOM(element) {\n  element.innerHTML = \" \";\n}\n\n/*----- \nUPDATING DOM / LOCAL STORAGE \n-----*/\n\nconst projectListContainer = document.getElementById(\"current-projects-list\");\nconst activeProjectHeader = document.getElementById(\"tasks-of-subfolder\");\nconst tasksContainer = document.getElementById(\"tasks-list\");\n\nfunction updateDomStorage() {\n  updateDOM();\n  localStorage.setItem(\"subfolders\", JSON.stringify(subfolders));\n  localStorage.setItem(\"selectedSubfolderId\", selectedSubfolderId);\n}\n\nfunction updateDOM() {\n  removeFromDOM(projectListContainer);\n  removeFromDOM(tasksContainer);\n  displaySubfolders();\n  projectsDropdown();\n  projectsDropdown();\n\n  const selectedSubfolder = subfolders.find(\n    (subfolder) => subfolder.id === selectedSubfolderId\n  );\n  if (selectedSubfolder != null) {\n    activeProjectHeader.textContent = `${selectedSubfolder.name}`;\n    displayTasks(selectedSubfolder);\n  } else {\n    activeProjectHeader.textContent = \"\";\n  }\n}\n\nfunction displaySubfolders() {\n  Object.keys(subfolders).forEach((key) => {\n    const value = subfolders[key];\n    const li = document.createElement(\"li\");\n    li.classList.add(\"project\");\n    li.classList.add(\"btn\");\n    li.id = value.id;\n    const h3 = document.createElement(\"h3\");\n    h3.textContent = `-> ${value.name}`;\n    li.appendChild(h3);\n    projectListContainer.append(li);\n    li.style.display = \"none\";\n    li.addEventListener(\"click\", () => {\n      selectedSubfolderId = li.id;\n      localStorage.setItem(\"selectedSubfolderId\", selectedSubfolderId);\n      updateDOM();\n    });\n  });\n}\n\nfunction displayTasks(subfolder) {\n  subfolder.tasks.forEach((task) => {\n    const li = document.createElement(\"li\");\n    li.classList.add(\"task\");\n    li.id = `${task.id}`;\n    if (task.complete == \"checked\") {\n      li.classList.add(\"checked\");\n    } else {\n      li.classList.remove(\"checked\");\n    }\n    li.innerHTML = `\n    <div class=\"task-above\">\n      <div class=\"task-left\">\n        <input\n          type=\"checkbox\"\n          id=\"${task.id}\"\n          onclick=\"event.stopPropagation()\"\n          ${task.complete}\n        />\n        <label> ${task.name}</label><br />\n      </div>\n      <div class=\"task-right\">\n        <i\n          class=\"fas fa-edit task-edit-btn btn\"\n          onclick=\"event.stopPropagation()\"\n        ></i>\n        <i\n          class=\"fas fa-flag priority-flag\"\n          onclick=\"event.stopPropagation()\"\n        ></i>\n        <i\n          class=\"fas fa-trash-alt task-delete-btn btn\"\n          onclick=\"event.stopPropagation()\"\n        ></i>\n      </div>\n    </div>\n    <div class=\"task-info-dropdown\">\n      <div class=\"task-info-dropdown-left\">\n        <h3>Name: ${task.name}</h3>\n        <h3>Description: ${task.description}</h3>\n      </div>\n      <div class=\"task-info-dropdown-right\">\n        <h3>Project: ${task.projectUnder}</h3>\n        <h3>Due Date: ${task.dueDate}</h3>\n        <h3>Priority Level: ${task.priority}</h3>\n      </div>\n    </div>`;\n    let completedTaskBtn = li.querySelector(`input`);\n    let deleteTaskBtn = li.querySelector(\"i.task-delete-btn\");\n    addTaskFunctionality(li, completedTaskBtn, deleteTaskBtn);\n    tasksContainer.appendChild(li);\n  });\n}\n/*----- \nTASK FUNCTIONALITY\n-----*/\n\nfunction addTaskFunctionality(task, completedTaskBtn, deleteTaskBtn) {\n  task.querySelector(\".task-above\").addEventListener(\"click\", () => {\n    if (task.querySelector(\".task-info-dropdown\").style.display == \"flex\") {\n      task.querySelector(\".task-info-dropdown\").style.display = \"none\";\n    } else {\n      task.querySelector(\".task-info-dropdown\").style.display = \"flex\";\n    }\n  });\n  completedTaskBtn.addEventListener(\"click\", () => {\n    task.classList.toggle(\"checked\");\n    const updatedTask = subfolders\n      .find((subfolder) => subfolder.id === selectedSubfolderId)\n      .tasks.find((t) => t.id === task.querySelector(\"input\").id);\n    if (updatedTask.complete == \" \") {\n      updatedTask.complete = \"checked\";\n    } else {\n      updatedTask.complete = \" \";\n    }\n    localStorage.setItem(\"subfolders\", JSON.stringify(subfolders));\n    subfolders = JSON.parse(localStorage.getItem(\"subfolders\")) || [];\n  });\n  deleteTaskBtn.addEventListener(\"click\", () => {\n    task.style.display = \"none\";\n    const subfolderOfTask = subfolders.find(\n      (subfolder) => subfolder.id === selectedSubfolderId\n    );\n    const removeIndex = subfolderOfTask.tasks.indexOf(\n      subfolderOfTask.tasks.find((t) => t.id === task.querySelector(\"input\").id)\n    );\n    subfolderOfTask.tasks.splice(removeIndex, 1);\n    localStorage.setItem(\"subfolders\", JSON.stringify(subfolders));\n    subfolders = JSON.parse(localStorage.getItem(\"subfolders\")) || [];\n  });\n}\n\n/*----- \nPROJECT / SUBFOLDER --- CREATION / UPDATE\n-----*/\nconst subfolderModal = document.getElementById(\"subfolder-modal\");\nconst addProjectBtn = document.getElementById(\"add-subfolder-btn\");\nconst submitProjectBtn = document.getElementById(\"confirm-subfolder\");\nconst subfolderContainer = document.getElementById(\"subfolders-list\");\naddProjectBtn.addEventListener(\"click\", projectPopUp);\nfunction projectPopUp() {\n  overlay.classList.add(\"active\");\n  subfolderModal.classList.add(\"active\");\n}\nsubmitProjectBtn.addEventListener(\"click\", () => {\n  const newSubfolderName = subfolderModal.querySelector(\n    \"input#subfolder-title-name-input\"\n  ).value;\n  if (newSubfolderName == \"\" || newSubfolderName == null) return;\n  newSubfolder = {\n    id: Date.now().toString(),\n    name: newSubfolderName,\n    tasks: [],\n  };\n  subfolders.push(newSubfolder);\n  removeOverlay();\n  updateDomStorage();\n});\n\n/*----- \nTASK --- CREATION / UPDATE\n-----*/\nconst submitTaskBtn = document.getElementById(\"confirm-task\");\nconst taskModal = document.getElementById(\"task-modal\");\nconst addTaskBtn = document.getElementById(\"add-task-button\");\nconst modalTitle = document.querySelector(\"h3.modal-title\");\n\naddTaskBtn.addEventListener(\"click\", taskPopUp);\nfunction taskPopUp() {\n  overlay.classList.add(\"active\");\n  taskModal.classList.add(\"active\");\n  modalTitle.textContent = \"Add Task\";\n  submitTaskBtn.querySelector(\".btn\").textContent = \"Add Task\";\n}\n\nsubmitTaskBtn.addEventListener(\"click\", () => {\n  const newTask = {\n    id: Date.now().toString(),\n    name: taskModal.querySelector(\"input#task-title-name-input\").value,\n    description: taskModal.querySelector(\"textarea#description\").value,\n    projectUnder: taskModal.querySelector(\"input#task-project-input\").value,\n    dueDate: taskModal.querySelector(\"input#task-due-date-input\").value,\n    priority: taskModal.querySelector(\"select#task-priority-input\").value,\n    complete: \" \",\n  };\n  const selectedSubfolder = subfolders.find(\n    (subfolder) => subfolder.id === selectedSubfolderId\n  );\n  selectedSubfolder.tasks.push(newTask);\n  removeOverlay();\n  updateDomStorage();\n});\n\n/*----- \nREMOVE OVERLAY\n-----*/\nconst removeOverlayBtns = document.querySelectorAll(\".close-modal\");\n\nremoveOverlayBtns.forEach((btn) => {\n  btn.addEventListener(\"click\", removeOverlay);\n});\n\nfunction removeOverlay() {\n  overlay.classList.remove(\"active\");\n  taskModal.classList.remove(\"active\");\n  subfolderModal.classList.remove(\"active\");\n}\n\n/*----- \n-----*/\nupdateDOM();\n\n\n//# sourceURL=webpack://to-do-app/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;